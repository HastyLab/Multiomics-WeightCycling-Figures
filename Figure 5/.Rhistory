theme(axis.text.x = element_blank(), axis.ticks = element_blank(), strip.text = element_text(face="bold", size=10)) +
facet_wrap(~Cluster) +
NoLegend() +
ylim(0,20)
ggboxplot(d=subset(monocellspm, Cluster=="Non-classical Monocytes"),
x="Group",
y="CountsPerHundred",
fill="Group",
facet.by="Cluster",
add = "mean_se") +
theme_classic() +
scale_fill_manual(values=wccols) +
theme(axis.text.y=element_text(face="bold", size=10)) +
labs(x="", y="") +
theme(axis.text.x = element_blank(), axis.ticks = element_blank(), strip.text = element_text(face="bold", size=10)) +
facet_wrap(~Cluster) +
NoLegend() +
ylim(0,5)
#Just for the legend
ggboxplot(d=subset(monocellspm, Cluster=="Non-classical Monocytes"),
x="Group",
y="CountsPerHundred",
fill="Group",
facet.by="Cluster",
add = "mean_se") +
theme_classic() +
scale_fill_manual(values=wccols) +
theme(axis.text.x=element_text(face="bold", size=10)) +
labs(x="", y="") +
theme(axis.text.x = element_blank(), axis.ticks = element_blank()) +
facet_wrap(~Cluster) +
ylim(0,5)
Idents(Monocytes) <- Monocytes$orig.ident
DefaultAssay(Monocytes) <- "RNA"
VlnPlot(subset(Monocytes,highlevel2=="Classical Monocytes"),
features=c("Ccr2","Ccr5","Cxcr4","Cd14","Cd36","Fcgr3","Itgax","Itgam","Fcgr1","Sell","Cd86","Cd74","Spn","Itgb3","Cd9","Trem2","Itga2b","Cd81","Cd93","Itgal","Lrp1","Cd40","Cd63","Havcr2"),
stack=T,
flip=T,
fill.by="ident",
cols=wccols) +
labs(x="") +
NoLegend() +
# theme(aspect.ratio = 0.25) +
scale_x_discrete(labels=c("Lean","Obese","WL","WC")) +
ggtitle("Classical Monocytes") +
theme(plot.title = element_text(size = 9))
VlnPlot(subset(Monocytes,highlevel2=="Non-classical Monocytes"),
features=c("Ccr2","Ccr5","Cxcr4","Cd14","Cd36","Fcgr3","Itgax","Itgam","Fcgr1","Sell","Cd86","Cd74","Spn","Itgb3","Cd9","Trem2","Itga2b","Cd81","Cd93","Itgal","Lrp1","Cd40","Cd63","Havcr2"),
stack=T,
flip=T,
fill.by="ident",
cols=wccols) +
labs(x="") +
NoLegend() +
# theme(aspect.ratio = 0.25) +
scale_x_discrete(labels=c("Lean","Obese","WL","WC")) +
ggtitle("Non-classical Monocytes") +
theme(plot.title = element_text(size = 9))
# Gene ontology "chemokine receptor activity;  GO:0004950"
chemo_rec <-  c("Ccr2","Ccr5",  "Ccr7", "Ccr8",  "Ccrl2", "Cx3cr1", "Cxcr2",  "Cxcr3",  "Cxcr4",  "Cxcr5",  "Cxcr6",  "Gpr35",  "Xcr1")
VlnPlot(subset(Monocytes,highlevel2=="Classical Monocytes"),
features=chemo_rec,
stack=T,
flip=T,
fill.by="ident",
cols=wccols) +
labs(x="") +
NoLegend() +
# theme(aspect.ratio = 0.25) +
scale_x_discrete(labels=c("Lean","Obese","WL","WC")) +
ggtitle("Classical Monocytes: Chemokine receptor activity; GO:0004950") +
theme(plot.title = element_text(size = 9))
VlnPlot(subset(Monocytes,highlevel2=="Non-classical Monocytes"),
features=chemo_rec,
stack=T,
flip=T,
fill.by="ident",
cols=wccols) +
labs(x="") +
NoLegend() +
# theme(aspect.ratio = 0.25) +
scale_x_discrete(labels=c("Lean","Obese","WL","WC")) +
ggtitle("Non-classical Monocytes: Chemokine receptor activity; GO:0004950") +
theme(plot.title = element_text(size = 9))
# Gene ontology "Integrin complex;  GO:0008305"
int_complex <-  c("Emilin1","Gm49368","Itga1","Itga2b","Itga3","Itga4","Itga5","Itga6","Itga8","Itga10","Itgal","Itgam","Itgav","Itgax","Itgb1","Itgb3","Itgb5","Itgb7","Lyn","Pmp22","Tspan32")
VlnPlot(subset(Monocytes,highlevel2=="Classical Monocytes"),
features=int_complex,
stack=T,
flip=T,
fill.by="ident",
cols=wccols) +
labs(x="") +
NoLegend() +
# theme(aspect.ratio = 0.25) +
scale_x_discrete(labels=c("Lean","Obese","WL","WC")) +
ggtitle("Classical Monocytes: Integrin complex;  GO:0008305") +
theme(plot.title = element_text(size = 9))
VlnPlot(subset(Monocytes,highlevel2=="Non-classical Monocytes"),
features=int_complex,
stack=T,
flip=T,
fill.by="ident",
cols=wccols) +
labs(x="") +
NoLegend() +
# theme(aspect.ratio = 0.25) +
scale_x_discrete(labels=c("Lean","Obese","WL","WC")) +
ggtitle("Non-classical Monocytes: Integrin complex;  GO:0008305") +
theme(plot.title = element_text(size = 9))
# Potential Figure
VlnPlot(subset(Monocytes,highlevel2=="Classical Monocytes"),
features=c("Cd36","Trem2","Cd9","Cd81","Cd63","Cd80","Cd86","Cd40"),
stack=T,
flip=T,
fill.by="ident",
cols=wccols) +
labs(x="") +
NoLegend() +
theme(aspect.ratio = 0.25, strip.text=element_text(face="bold.italic"), text=element_text(size=18), axis.text.x = element_text(size=16)) +
scale_x_discrete(labels=c("Lean","Obese","WL","WC"))
#Convert Seurat Object into a SingleCellExperiment object
counts <- data.integrated@assays$RNA@counts #Raw counts
metadata <- data.integrated@meta.data[,c("orig.ident","HTO_maxID","HTO_classification.global","lowlevel2","highlevel2","individual_mice")] #metadata
metadata$individual_mice <- gsub("_","",metadata$individual_mice)
sce <- SingleCellExperiment(assays=list(counts=counts), colData = metadata)
#Identify Groups to aggregate counts from
groups <- colData(sce)[, c("lowlevel2", "individual_mice")]
#Aggregrate across cluster-sample groups
pb <- aggregate.Matrix(t(counts(sce)),
groupings = groups, fun = "sum")
#Create a vector to split samples.
splitf <- sapply(stringr::str_split(rownames(pb),
pattern = "_",
n = 2),
`[`, 1)
#Split matrix into a list containing components for each cluster and transpose
pb <- split.data.frame(pb,
factor(splitf)) %>%
lapply(function(u)
set_colnames(t(u),
stringr::str_extract(rownames(u), "(?<=_)[:alnum:]+")))
#Create vectors containing sample information
clusters <- purrr::set_names(levels(sce$lowlevel2))
n_clusters <- length(clusters)
samples <- purrr::set_names(levels(factor(sce$individual_mice)))
n_samples <- length(samples)
#Collect sample metadata
n_cells <- as.numeric(table(sce$individual_mice))
m <- match(samples, sce$individual_mice)
ei <- data.frame(colData(sce)[m,],
n_cells, row.names=NULL) %>%
select(-"lowlevel2")
#Create a table to see how many cells belong to each grouping
data.frame(table(sce$individual_mice, sce$lowlevel2)) %>% 'colnames<-'(c("Sample","Subcluster","# Cells")) %>% tibble()
#Generate sample-level metadata
metadata <- unique(data.frame(metadata$lowlevel2, metadata$individual_mice, metadata$orig.ident)) %>% 'colnames<-'(c("cluster_id","sample_id","group_id"))
#Vector of cluster IDs
clusters <- levels(metadata$cluster_id)
#Subset for the group of interest
cluster_metadata <- metadata[which(metadata$cluster_id == "Monocytes"), ]
rownames(cluster_metadata) <- cluster_metadata$sample_id
counts <- pb$`Monocytes`
cluster_counts <- data.frame(counts[, which(colnames(counts) %in% rownames(cluster_metadata))])
cluster_metadata <- cluster_metadata[match(colnames(cluster_counts),cluster_metadata$sample_id),]
all(rownames(cluster_metadata) == colnames(cluster_counts))
#Create the DESeq2 data object
dds <- DESeqDataSetFromMatrix(countData=round(cluster_counts),
colData = cluster_metadata,
design = ~ group_id)
#Set obese as the reference control. We are using LRT insteaed of Wald, so this doesn't really matter.
dds$group_id <- relevel(dds$group_id, ref="Obese")
rld <- rlog(dds, blind=TRUE)
#Plot PCA
DESeq2::plotPCA(rld, intgroup = "group_id")
#Plot heatmap
rld_mat <- assay(rld)
rld_cor <- cor(rld_mat)
pheatmap(rld_cor, annotation = cluster_metadata[, c("group_id"), drop=F])
#Run LRT testing via DESeq2
dds <- DESeq(dds, test = "LRT", reduced=~1)
#plot dispersion
plotDispEsts(dds)
#Define contrasts. LRT compares across all groups, so this isn't necessary either.
contrast <- c("group_id", levels(cluster_metadata$group_id)[1], levels(cluster_metadata$group_id)[2])
#Generate DE results
res <- results(dds,
contrast = contrast,
alpha = 0.05)
res_tbl <- res %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
#Filter the results, keeping only significant genes
padj_cutoff <- 0.05
sig_res <- dplyr::filter(res_tbl, padj < padj_cutoff) %>%
dplyr::arrange(padj)
#Normalize the counts for all genes
normalized_counts <- counts(dds,
normalized = TRUE)
#Plot the top 20 genes
top20_sig_genes <- sig_res %>%
dplyr::arrange(padj) %>%
dplyr::pull(gene) %>%
head(n=20)
top20_sig_norm <- data.frame(normalized_counts) %>%
rownames_to_column(var = "gene") %>%
dplyr::filter(gene %in% top20_sig_genes)
gathered_top20_sig <- top20_sig_norm %>%
gather(colnames(top20_sig_norm)[2:length(colnames(top20_sig_norm))], key = "samplename", value = "normalized_counts")
gathered_top20_sig <- inner_join(ei[, c("individual_mice", "orig.ident" )], gathered_top20_sig, by = c("individual_mice" = "samplename"))
ggplot(gathered_top20_sig) +
geom_point(aes(x = gene,
y = normalized_counts,
color = orig.ident),
position=position_jitter(w=0.1,h=0)) +
scale_y_log10() +
xlab("Genes") +
ylab("log10 Normalized Counts") +
ggtitle("Top 20 Significant DE Genes") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values=wccols)
#Use the degreport package to group genes by changes in patterns across groups. Normally this is for timecourse data, but works really effectively in our paradigm to look at genes that recover or fail to recover during WL.
cluster_rlog <- rld_mat[sig_res$gene, ]
metadata <- subset(metadata, cluster_id=="Monocytes")
rownames(metadata) <- metadata$sample_id
metadata <- metadata[match(colnames(cluster_rlog),cluster_metadata$sample_id),]
clusters <- degPatterns(cluster_rlog, metadata = metadata, time = "group_id", col=NULL, plot=FALSE)
ggplot(clusters$normalized, aes(x=group_id,y=value, color=group_id)) +
stat_smooth(aes(x=group_id, y=value))+
geom_point(alpha=0.5, size=1, position=position_jitterdodge(dodge.width = 0.9)) +
geom_line(aes(group=genes), alpha=0.1) +
geom_boxplot(alpha=0, outlier.size=0, outlier.shape=NA)+
facet_wrap(~cluster, ncol=4) +
theme_pubr(base_size = 12) +
labs(y="Z-score of gene abundance") +
scale_color_manual(values=wccols)+
theme(axis.title.x=element_blank()) +
NoLegend()
#Gene clusters:
# 1 = Lean-associated genes that recover with WL
# 2 = Obese-associated genes that do not recover with WL
# 3 = Obese-associated genes that recover with WL
# 4 = Obese-associated genes that do not recover with WL
# 5 = Lean-associated genes that do not recover with WL
# 6 = Lean-associated genes that do not recover with WL
# 7 = Obese-associated genes that do not recover with WL
#Regroups clusters by the above simplified patterns into.
Monocyte_DEG_patterns <- clusters$normalized %>% mutate(patterns = ifelse(cluster==1, 1, #Highest in lean, recover with WL
ifelse(cluster==3,2, #Lowest in lean, recover with WL
ifelse(cluster==2 | cluster==4 | cluster==7,4, #lowest in lean, don't recover with WL
ifelse(cluster==5|cluster==6,3,""))))) #highest in lean, don't recover with WL
ggplot(Monocyte_DEG_patterns, aes(x=group_id,y=value, color=group_id)) +
stat_smooth(aes(x=group_id, y=value))+
geom_point(alpha=0.5, size=0.5, position=position_jitterdodge(dodge.width = 0.9)) +
geom_line(aes(group=genes), alpha=0.1) +
geom_boxplot(alpha=0, outlier.size=0, outlier.shape=NA)+
facet_wrap(~patterns, ncol=4) +
theme_pubr(base_size = 12) +
labs(y="Z-score of gene abundance") +
scale_color_manual(values=wccols)+
theme(strip.background = element_blank(), strip.text.x=element_blank(), axis.title.x=element_blank()) +
NoLegend()
#To save genes for putting into Metascape
#write.csv(data.frame(Monocyte_DEG_patterns$genes, Monocyte_DEG_patterns$patterns) %>% unique() %>%  'colnames<-'(c("genes","patterns")), file="Monocyte_metascape.csv")
#Ran these through metascape for gene ontology
Pattern1 <- read.csv("../Inputs/Fig5/Monocyte_Pattern_A/Enrichment_GO/_FINAL_GO.csv")
Pattern2 <- read.csv("../Inputs/Fig5/Monocyte_Pattern_B/Enrichment_GO/_FINAL_GO.csv")
Pattern3 <- read.csv("../Inputs/Fig5/Monocyte_Pattern_C/Enrichment_GO/_FINAL_GO.csv")
Pattern4 <- read.csv("../Inputs/Fig5/Monocyte_Pattern_D/Enrichment_GO/_FINAL_GO.csv")
#We will plot the top5 pathways for each pattern
top_pathways_1 <- subset(Pattern1,FirstInGroupByEnrichment==1)
top_pathways_1$GO <- factor(top_pathways_1$GO, levels = top_pathways_1$GO[order(top_pathways_1$Log.q.value.)])
top_pathways_1 <- top_pathways_1 %>% distinct(Description,.keep_all = TRUE)
ggplot(top_pathways_1[1:5,],aes(x=-Log.q.value., y=rev(GO), color=Log.q.value., label=stringr::str_wrap(Description,30)))+
geom_point(size=4) +
labs(x="-log10(adj P value)",y="") +
theme_pubr(base_size=10) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlim(0,30) +
scale_color_gradient(high="#d16f6f",low="#960000") +
NoLegend() +
geom_text_repel(nudge_x = 1,nudge_y = 0.55, size=3, min.segment.length = 0.001) +
geom_vline(xintercept=-log10(0.01), color="grey",linetype="dashed")
top_pathways_2 <- subset(Pattern2,FirstInGroupByEnrichment==1)
top_pathways_2$GO <- factor(top_pathways_2$GO, levels = top_pathways_2$GO[order(top_pathways_2$Log.q.value.)])
top_pathways_2 <- top_pathways_2 %>% distinct(Description,.keep_all = TRUE)
ggplot(top_pathways_2[1:5,],aes(x=-Log.q.value., y=rev(GO), color=Log.q.value., label=stringr::str_wrap(Description,20)))+
geom_point(size=4) +
labs(x="-log10(adj P value)",y="") +
theme_pubr(base_size=10) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlim(0,10) +
scale_color_gradient(high="#d16f6f",low="#960000") +
NoLegend() +
geom_text_repel(nudge_x = 3,nudge_y = 0.33, size=3, min.segment.length = 0.001) +
geom_vline(xintercept=-log10(0.01), color="grey",linetype="dashed")
top_pathways_3 <- subset(Pattern3,FirstInGroupByEnrichment==1)
top_pathways_3$GO <- factor(top_pathways_3$GO, levels = top_pathways_3$GO[order(top_pathways_3$Log.q.value.)])
top_pathways_3 <- top_pathways_3 %>% distinct(Description,.keep_all = TRUE)
ggplot(top_pathways_3[1:5,],aes(x=-Log.q.value., y=rev(GO), color=Log.q.value., label=stringr::str_wrap(Description,25)))+
geom_point(size=4) +
labs(x="-log10(adj P value)",y="") +
theme_pubr(base_size=10) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlim(0,10) +
scale_color_gradient(high="#d16f6f",low="#960000") +
NoLegend() +
geom_text_repel(nudge_x = -4,nudge_y = 0.6, size=3, min.segment.length = 0.001) +
geom_vline(xintercept=-log10(0.01), color="grey",linetype="dashed")
top_pathways_4 <- subset(Pattern4,FirstInGroupByEnrichment==1)
top_pathways_4$GO <- factor(top_pathways_4$GO, levels = top_pathways_4$GO[order(top_pathways_4$Log.q.value.)])
top_pathways_4 <- top_pathways_4 %>% distinct(Description,.keep_all = TRUE)
ggplot(top_pathways_4[1:5,],aes(x=-Log.q.value., y=rev(GO), color=Log.q.value., label=stringr::str_wrap(Description,20)))+
geom_point(size=4) +
labs(x="-log10(adj P value)",y="") +
theme_pubr(base_size=10) +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
xlim(0,30) +
scale_color_gradient(high="#d16f6f",low="#960000") +
NoLegend() +
geom_text_repel(nudge_x = -6,nudge_y = 0.5, size=3, min.segment.length = 0.001) +
geom_vline(xintercept=-log10(0.01), color="grey",linetype="dashed")
Fig5DCs <- subset(data.integrated, highlevel2=="cDC1" | highlevel2=="Activated cDC1" | highlevel2=="Cycling cDC1" |  highlevel2=="cDC2" | highlevel2=="Activated cDC2" | highlevel2=="Cycling cDC2" | highlevel2=="pDCs" | highlevel2=="moDCs")
Idents(Fig5DCs) <- Fig5DCs$highlevel2
DefaultAssay(Fig5DCs) <- "RNA"
VlnPlot(Fig5DCs,
features=c("Cst3","Clec9a","Xcr1","Sirpa","Cd209a","Stmn1","Pclaf","Siglech","Ear2"),
stack=T,
flip=T,
fill.by="ident",
cols=c("#E5F5E0","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#006D2C","#00441B")) +
labs(x="") +
NoLegend() +
theme(aspect.ratio = 0.25, strip.text=element_text(face="bold.italic"))
dccomps <- list(c("Lean","WL"),c("Lean","Obese"),c("Obese","WC"))
DCscellspm <- subset(cellspm,
Cluster=="cDC1" |
Cluster=="Activated cDC1" |
Cluster=="Cycling cDC1" |
Cluster=="cDC2" |
Cluster=="Activated cDC2" |
Cluster=="Cycling cDC2" |
Cluster=="moDCs" |
Cluster=="pDCs")
DCscellspm$Group <- factor(DCscellspm$Group, levels = c("Lean","Obese","WL","WC"))
DCsclustercounts <- subset(clustercounts,
Cluster=="cDC1" |
Cluster=="Activated cDC1" |
Cluster=="Cycling cDC1" |
Cluster=="cDC2" |
Cluster=="Activated cDC2" |
Cluster=="Cycling cDC2" |
Cluster=="moDCs" |
Cluster=="pDCs")
DCsclustercounts$Group <- factor(DCsclustercounts$Group, levels = c("Lean","Obese","WL","WC"))
#T-test with bonferroni correction for multiple comparisons was used to compare all groups to the Lean reference control.
compare_means(CountsPerHundred ~ Group, data = subset(DCscellspm, Cluster=="cDC1"), method="t.test", p.adjust.method = "bonferroni", ref.group="Lean")
compare_means(CountsPerHundred ~ Group, data = subset(DCscellspm, Cluster=="Activated cDC1"), method="t.test", p.adjust.method = "bonferroni", ref.group="Lean")
compare_means(CountsPerHundred ~ Group, data = subset(DCscellspm, Cluster=="Cycling cDC1"), method="t.test", p.adjust.method = "bonferroni", ref.group="Lean")
compare_means(CountsPerHundred ~ Group, data = subset(DCscellspm, Cluster=="cDC2"), method="t.test", p.adjust.method = "bonferroni", ref.group="Lean")
compare_means(CountsPerHundred ~ Group, data = subset(DCscellspm, Cluster=="Activated cDC2"), method="t.test", p.adjust.method = "bonferroni", ref.group="Lean")
compare_means(CountsPerHundred ~ Group, data = subset(DCscellspm, Cluster=="Cycling cDC2"), method="t.test", p.adjust.method = "bonferroni", ref.group="Lean")
compare_means(CountsPerHundred ~ Group, data = subset(DCscellspm, Cluster=="moDCs"), method="t.test", p.adjust.method = "bonferroni", ref.group="Lean")
compare_means(CountsPerHundred ~ Group, data = subset(DCscellspm, Cluster=="pDCs"), method="t.test", p.adjust.method = "bonferroni", ref.group="Lean")
ggboxplot(d=subset(DCscellspm, Cluster=="cDC1"),
x="Group",
y="CountsPerHundred",
fill="Group",
facet.by="Cluster",
add = "mean_se") +
theme_classic() +
scale_fill_manual(values=wccols) +
theme(axis.text.y=element_text(face="bold", size=10), strip.text = element_text(face="bold",size=10)) +
labs(x="", y="") +
theme(axis.text.x = element_blank(), axis.ticks = element_blank()) +
facet_wrap(~Cluster) +
NoLegend() +
ylim(0,10)
ggboxplot(d=subset(DCscellspm, Cluster=="Activated cDC1"),
x="Group",
y="CountsPerHundred",
fill="Group",
facet.by="Cluster",
add = "mean_se") +
theme_classic() +
scale_fill_manual(values=wccols) +
theme(axis.text.y=element_text(face="bold", size=10), strip.text = element_text(face="bold",size=10)) +
labs(x="", y="") +
theme(axis.text.x = element_blank(), axis.ticks = element_blank()) +
facet_wrap(~Cluster) +
NoLegend() +
ylim(0,2)
ggboxplot(d=subset(DCscellspm, Cluster=="Cycling cDC1"),
x="Group",
y="CountsPerHundred",
fill="Group",
facet.by="Cluster",
add = "mean_se")   +
theme_classic() +
scale_fill_manual(values=wccols) +
theme(axis.text.y=element_text(face="bold", size=10), strip.text = element_text(face="bold",size=10)) +
labs(x="", y="") +
theme(axis.text.x = element_blank(), axis.ticks = element_blank()) +
facet_wrap(~Cluster) +
NoLegend() +
ylim(0,2)
ggboxplot(d=subset(DCscellspm, Cluster=="cDC2"),
x="Group",
y="CountsPerHundred",
fill="Group",
facet.by="Cluster",
add = "mean_se") +
theme_classic() +
scale_fill_manual(values=wccols) +
theme(axis.text.y=element_text(face="bold", size=10), strip.text = element_text(face="bold",size=10)) +
labs(x="", y="") +
theme(axis.text.x = element_blank(), axis.ticks = element_blank()) +
facet_wrap(~Cluster) +
NoLegend() +
ylim(0,6)
ggboxplot(d=subset(DCscellspm, Cluster=="Activated cDC2"),
x="Group",
y="CountsPerHundred",
fill="Group",
facet.by="Cluster",
add = "mean_se")   +
theme_classic() +
scale_fill_manual(values=wccols) +
theme(axis.text.y=element_text(face="bold", size=10), strip.text = element_text(face="bold",size=10)) +
labs(x="", y="") +
theme(axis.text.x = element_blank(), axis.ticks = element_blank()) +
facet_wrap(~Cluster) +
NoLegend() +
ylim(0,3)
ggboxplot(d=subset(DCscellspm, Cluster=="Cycling cDC2"),
x="Group",
y="CountsPerHundred",
fill="Group",
facet.by="Cluster",
add = "mean_se")   +
theme_classic() +
scale_fill_manual(values=wccols) +
theme(axis.text.y=element_text(face="bold", size=10), strip.text = element_text(face="bold",size=10)) +
labs(x="", y="") +
theme(axis.text.x = element_blank(), axis.ticks = element_blank()) +
facet_wrap(~Cluster) +
NoLegend() +
ylim(0,1)
ggboxplot(d=subset(DCscellspm, Cluster=="moDCs"),
x="Group",
y="CountsPerHundred",
fill="Group",
facet.by="Cluster",
add = "mean_se") +
theme_classic() +
scale_fill_manual(values=wccols) +
theme(axis.text.y=element_text(face="bold", size=10), strip.text = element_text(face="bold",size=10)) +
labs(x="", y="") +
theme(axis.text.x = element_blank(), axis.ticks = element_blank()) +
facet_wrap(~Cluster) +
NoLegend() +
ylim(0,8)
ggboxplot(d=subset(DCscellspm, Cluster=="pDCs"),
x="Group",
y="CountsPerHundred",
fill="Group",
facet.by="Cluster",
add = "mean_se") +
theme_classic() +
scale_fill_manual(values=wccols) +
theme(axis.text.y=element_text(face="bold", size=10), strip.text = element_text(face="bold",size=10)) +
labs(x="", y="") +
theme(axis.text.x = element_blank(), axis.ticks = element_blank()) +
facet_wrap(~Cluster) +
NoLegend() +
ylim(0,1)
Fig5DCs <- subset(data.integrated, highlevel2=="cDC1" | highlevel2=="Activated cDC1" | highlevel2=="Cycling cDC1" |  highlevel2=="cDC2" | highlevel2=="Activated cDC2" | highlevel2=="Cycling cDC2" | highlevel2=="pDCs" | highlevel2=="moDCs")
Idents(Fig5DCs) <- Fig5DCs$highlevel2
DefaultAssay(Fig5DCs) <- "RNA"
VlnPlot(Fig5DCs,
features=c("Ccr7","Mreg","Fscn1","Il15ra","Il12b","Fabp5","Ldha"),
stack=T,
flip=T,
fill.by="ident",
cols=c("#E5F5E0","#C7E9C0","#A1D99B","#74C476","#41AB5D","#238B45","#006D2C","#00441B")) +
labs(x="") +
NoLegend() +
theme(aspect.ratio = 0.3)
knitr::include_graphics("figures/scvelo1.png")
knitr::include_graphics("figures/scvelo2.png")
DCs <- subset(data.integrated,lowlevel2=="Dendritic Cells")
FeaturePlot(DCs, features=c("Cd274","Pdcd1lg2","Cd200"), split.by="orig.ident", by.col=T, pt.size=1, order=T) & theme_void() & NoLegend() & scale_color_viridis(option="D", limits=c(0,2)) & ylim(-10,3) & xlim(-7,7)
### for scale bar
FeaturePlot(DCs, features=c("Cd274","Pdcd1lg2","Cd200"), split.by="orig.ident", by.col=T, pt.size=0.5)  & scale_color_viridis(option="D", limits=c(0,2), breaks=c(0,1,2)) & ylim(-10,3) & xlim(-7,7) & theme(legend.position="bottom")
### Just using this for nice labels
VlnPlot(DCs, features=c("Cd274","Pdcd1lg2","Cd200"), stack=T, flip=T, split.by="orig.ident") + theme(strip.text=element_text(face="bold.italic"))
sessionInfo()
Idents(Monocytes) <- Monocytes$orig.ident
DefaultAssay(Monocytes) <- "RNA"
VlnPlot(subset(Monocytes,highlevel2=="Classical Monocytes"),
features=c("Cd36","Trem2","Cd9","Cd81","Cd63","Cd80","Cd86","Cd40"),
stack=T,
flip=T,
fill.by="ident",
cols=wccols) +
labs(x="") +
NoLegend() +
theme(aspect.ratio = 0.25, strip.text=element_text(face="bold.italic"), text=element_text(size=18), axis.text.x = element_text(size=16)) +
scale_x_discrete(labels=c("Lean","Obese","WL","WC"))
